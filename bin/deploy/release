#!/bin/bash
#
# Deploys a specific set of code across projects

set -e

. "$HOME/.tixrc"

latest=false
configuration=Release
encrypt=true
release_root="release"
js_revision=""
net_revision=""

usage_short="${CYAN}Usage: release [-l] [-c configuration] [-e] [-d destination-path] [-j js-revision] [-n net-revision]"
usage_long="$usage_short\n-l: Deploy latest across all libraries."
usage_long="$usage_long\n-c: Configuration to deploy (default: $configuration)."
usage_long="$usage_long\n-e: Encrypt connection strings configuration (default: $encrypt)."
usage_long="$usage_long\n-d: Optional destination directory (default: $release_root)."
usage_long="$usage_long\n-j: tixinc-js revision to deploy."
usage_long="$usage_long\n-n: tixinc-net revision to deploy.${NC}"

usage_short="$usage_short\nUse -h to get supported command information.${NC}"

options=":ld:j:n:"
shopt -u nocasematch
OPTIND=1
while getopts "$options" opt ; do
    case "$opt" in
    l )
      latest=true
      ;;
    c )
      configuration="$OPTARG"
      ;;
    d )
      release_root="$OPTARG"
      ;;
    j )
      js_revision=$OPTARG
      ;;
    n )
      net_revision=$OPTARG
      ;;
    h )
      >&2 echo -e "$usage_long" && exit 1
      exit 0
      ;;
    \?)
      >&2 echo -e "Unknown option: -$OPTARG"
      >&2 echo -e "$usage_short"
      exit 1
      ;;
    : )
      >&2 echo -e "Missing option argument for -$OPTARG"
      >&2 echo -e "$usage_short"
      exit 1
      ;;
    * )
      >&2 echo -e "Unimplemented option: -$OPTARG" && exit 1
      >&2 echo -e "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))

if [ "$latest" = true ] ; then
  >&2 echo -e "${BLUE}--latest (-l) flag specified, getting the latest annotated tagged versions of tixinc-js and tixinc-net--${NC}"
  js_revision=$(revisions -l tixinc-js)
  net_revision=$(revisions -l tixinc-net)
  >&2 echo -e "${BLUE}--Using tixinc-js $js_revision and tixinc-net $net_revision--${NC}"
fi

if [ "$js_revision" = "" ] ; then
  >&2 echo -e "${RED}--tixinc-js (-j) revision string is mandatory.  Use \"revisions -m tixinc-js\" to see recent versions--${NC}" && exit 1
fi
if [ "$net_revision" = "" ] ; then
  >&2 echo -e "${RED}--tixinc-net (-n) revision string is mandatory.  Use \"revisions -m tixinc-net\" to see recent versions--${NC}" && exit 1
fi


release_name="net_${net_revision}-js_${js_revision}"
>&2 echo -e "--Building and packaging release $release_name--"
if [ "$encrypt" = true ] ; then
  deploy-net -v "$net_revision" -c "$configuration" -V 12.0 -e
else
  deploy-net -v "$net_revision" -c "$configuration" -V 12.0
fi
deploy-js "$js_revision"
deploy-startup


to_win_path() {
  if [ "$1" ] ; then
    # handle absolute
    if [[ "$1" == /* ]] ; then
      # strip leading slash and convert to backslash
      win_path=$(echo "$1" | sed -e 's/^\///'  -e 's/\//\\\\/g')
      # Add semicolon after drive
      win_path=$(echo "${win_path:0:1}:${win_path:1}")
      echo -en "$win_path"
    else
      # convert to backslash
      win_path=$(echo "$1" | sed 's/\//\\\\/g')
      echo -en "$win_path"
    fi
  fi
}


release_path="${release_root}/${release_name}.7z"
j_artifacts_root="/c/art"
j_release_root="/c/rel"
j_release_path="${j_release_root}/${release_name}.7z"

mkdirp "$release_root"
rimraf "$release_path"

win_artifacts_root="$(to_win_path "$ARTIFACTS_ROOT")"
win_j_artifacts_root="$(to_win_path "$j_artifacts_root")"
>&2 echo -e "--Creating junction from $win_artifacts_root to $win_j_artifacts_root--"
cmd //c mklink //J "$win_j_artifacts_root" "$win_artifacts_root"

win_release_root="$(to_win_path "$release_root")"
win_j_release_root="$(to_win_path "$j_release_root")"
>&2 echo -e "--Creating junction from $win_release_root to $win_j_release_root--"
cmd //c mklink //J "$win_j_release_root" "$win_release_root"


>&2 echo -e "--Packaging release to $release_path--"
pushd "$j_artifacts_root">/dev/null
  # 7zip the built artifacts using max compression and multithreading
  7za a -t7z "$j_release_path" ./* -m0=lzma2 -mx=9 -aoa -mfb=64 -md=32m -ms=on
popd >/dev/null

rimraf "$j_artifacts_root"
rimraf "$j_release_root"

>&2 echo -e "${GREEN}--Release packaged successfully at $release_path--${NC}"
