#!/bin/bash
#
# Deploys a specific set of code across projects

set -e

. "$HOME/.tixrc"

if ! hash junc 2>/dev/null ; then
  tix -i
fi

latest=false
configuration=Release
encrypt=false
release_root="$RELEASE_ROOT"
js_revision=""
net_revision=""

usage_short="${CYAN}Usage: release [-l] [-c configuration] [-e] [-d destination-path] [-j js-revision] [-n net-revision]"
usage_long="$usage_short\n-l: deploy latest across all libraries"
usage_long="$usage_long\n-c: configuration to deploy (default: $configuration)"
usage_long="$usage_long\n-e: encrypt connection strings configuration (default: $encrypt)"
usage_long="$usage_long\n-d: optional destination directory (default: $release_root)"
usage_long="$usage_long\n-j: tixinc-js revision to deploy"
usage_long="$usage_long\n-n: tixinc-net revision to deploy${NC}"

usage_short="$usage_short\nUse -h to get supported command information.${NC}"

options=":lc:ed:j:n:h"
shopt -u nocasematch
OPTIND=1
while getopts "$options" opt ; do
    case "$opt" in
    l )
      latest=true
      ;;
    c )
      configuration="$OPTARG"
      ;;
    e )
      encrypt=true
      ;;
    d )
      release_root="$OPTARG"
      ;;
    j )
      js_revision=$OPTARG
      ;;
    n )
      net_revision=$OPTARG
      ;;
    h )
      >&2 printf "%b" "$usage_long" && exit 1
      exit 0
      ;;
    \?)
      >&2 printf "%b" "unknown option: -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
      ;;
    : )
      >&2 printf "%b" "missing option argument for -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
      ;;
    * )
      >&2 printf "%b" "unimplemented option: -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))

if [ "$latest" = true ] ; then
  >&2 printf "%b- latest (-l) flag specified, getting the latest annotated tagged versions of tixinc-js and tixinc-net -%b\n" "$CYAN" "$NC"
  js_revision=$(revisions -l tixinc-js)
  net_revision=$(revisions -l tixinc-net)
  >&2 printf -- "%b- using tixinc-js $s and tixinc-net $s -%b\n" "$CYAN" "$js_revision" "$net_revision" "$NC"
fi

if [ "$js_revision" = "" ] ; then
  >&2 printf "%b- tixinc-js (-j) revision string is mandatory.  Use \"revisions -m tixinc-js\" to see recent versions -%b\n" "$RED" "$NC"
  exit 1
fi
if [ "$net_revision" = "" ] ; then
  >&2 printf "%b- tixinc-net (-n) revision string is mandatory.  Use \"revisions -m tixinc-net\" to see recent versions -%b\n" "$RED" "$NC"
  exit 1
fi

configuration_lower="$(printf "%s" "$configuration" | tr '[:upper:]' '[:lower:]')"
release_name="$(printf "net_%s-js_%s-%s" "$net_revision" "$js_revision" "$configuration_lower")"
>&2 printf -- "- building and packaging release %s -\n" "$release_name"
if [ "$encrypt" = true ] ; then
  deploy-net -v "$net_revision" -c "$configuration" -V 12.0 -e
else
  deploy-net -v "$net_revision" -c "$configuration" -V 12.0
fi
deploy-js "$js_revision"
deploy-startup
#deploy-rsa "$configuration"

release_path="${release_root}/${release_name}.7z"
mkdirp "$release_root"

>&2 printf -- "- packaging release to %s -\n" "$release_path"
pushj "$ARTIFACTS_ROOT" >/dev/null
  # 7zip the built artifacts using max compression and multithreading
  7za a -t7z "$release_path" ./* -m0=lzma2 -mx=9 -aoa -mfb=64 -md=32m -ms=on
popj >/dev/null

>&2 printf "%b- release packaged successfully at %s -%b\n" "$GREEN" "$release_path" "$NC"
