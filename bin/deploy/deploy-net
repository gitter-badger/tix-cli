#!/bin/bash
#
# Deploys fresh tixinc-net artifacts

set -e
. "$HOME/.tixrc"

latest=false
version=""
tools_version="12.0"
configuration=Debug
encrypt=false
output_path="$NET_ARTIFACTS_ROOT"

usage_short="${CYAN}Usage: deploy-net -l|-v version [-t ToolsVersion] [-c Configuration] [-e] [-o OutputPath]"
usage_long="$usage_short\n-l: Deploy latest version of tixinc-net."
usage_long="$usage_long\n-v: Deploy specific version (tag or hash)."
usage_long="$usage_long\n-t: MSBuild ToolsVersion to use."
usage_long="$usage_long\n-c: Configuration to deploy (default=Debug)."
usage_long="$usage_long\n-e: Encrypt configuration section."
usage_long="$usage_long\n-o: Output path (default=$output_path)."

usage_short="$usage_short\nUse -h to get supported command information.${NC}"


options=":lv:t:c:eo:h"
OPTIND=1
while getopts "$options" opt ; do
    case "$opt" in
    l )
      latest=true
      ;;
    v )
      version="$OPTARG"
      ;;
    t )
      tools_version="$OPTARG"
      ;;
    c )
      configuration="$OPTARG"
      ;;
    e )
      encrypt=true
      ;;
    o )
      output_path="$OPTARG"
      ;;
    h )
      >&2 echo -e "$usage_long" && exit 1
      exit 0
      ;;
    \?)
      >&2 echo -e "Unknown option: -$OPTARG"
      >&2 echo -e "$usage_short"
      exit 1
      ;;
    : )
      >&2 echo -e "Missing option argument for -$OPTARG"
      >&2 echo -e "$usage_short"
      exit 1
      ;;
    * )
      >&2 echo -e "Unimplemented option: -$OPTARG" && exit 1
      >&2 echo -e "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))

if [ "$latest" = true ] ; then
  version="$(revisions -l tixinc-net)"
fi

if [ "$version" = "" ] ; then
  >&2 echo -e "${RED}--Must specify a version to deploy (-l or -v version)--${NC}"
  exit 1
fi

to_win_path() {
  if [ "$1" ] ; then
    # handle absolute
    if [[ "$1" == /* ]] ; then
      # strip leading slash and convert to backslash
      win_path=$(echo "$1" | sed -e 's/^\///'  -e 's/\//\\\\/g')
      # Add semicolon after drive
      win_path=$(echo "${win_path:0:1}:${win_path:1}")
      echo -en "$win_path"
    else
      # convert to backslash
      win_path=$(echo "$1" | sed 's/\//\\\\/g')
      echo -en "$win_path"
    fi
  fi
}

# msbuild might exist and be in path, might exist and not be in path or might not exist... thankfully MS makes this easy to install.. not
# setup default paths an test to see if its there
msbuild_path="/c/Program Files (x86)/MSBuild/${tools_version}/Bin/MSBuild.exe"
win_msbuild_path="$(to_win_path "$msbuild_path")"
if [ ! -f "$msbuild_path" ] ; then
  # Not there, lets install
  >&2 echo -e "${BLUE}--MSBUILD not found, installing...--${NC}"
  choco install microsoft-build-tools

  # These downloads might help at some point
  #http://download.microsoft.com/download/9/B/B/9BB1309E-1A8F-4A47-A6C5-ECF76672A3B3/BuildTools_Full.exe
  #choco install netfx-4.5.2-devpack
fi
if [ ! -f "$msbuild_path" ] ; then
  >&2 echo -e "${RED}--MSBUILD still not found... hail mary to see if it is in default path--${NC}"
  msbuild_path="msbuild"
  win_msbuild_path="msbuild"
fi


echo "--executing build-net $version--"
build-net "$version"

>&2 echo "--Building and deploying artifacts version $version--"
pushd "$NET_BUILD_ROOT" >/dev/null
  >&2 echo "--Restoring packages--"
  nuget restore Tix.SelfHost.sln -PackagesDirectory packages -Verbosity quiet -NonInteractive
  >&2 echo "--Packages restored successfully--"

  >&2 echo "--Cleaning $NET_ARTIFACTS_ROOT--"
  rimraf "$NET_ARTIFACTS_ROOT"
  mkdirp "$NET_ARTIFACTS_ROOT"
  >&2 echo "--MSBUILD artifacts--"

  win_artifacts_root="$(to_win_path "$output_path")"
  >&2 echo "Building to $win_artifacts_root"

  >&2 echo "Executing... -> cmd //c \"$win_msbuild_path\" Tix.Web.SelfHost\\Tix.Web.SelfHost.csproj //tv:${tools_version} //nologo //p:Configuration=${configuration} //p:OutputPath=\"${win_artifacts_root}\" //m //v:m //clp:ErrorsOnly"
  cmd //c "$win_msbuild_path" Tix.Web.SelfHost\\Tix.Web.SelfHost.csproj //tv:${tools_version} //nologo //p:Configuration=${configuration} //p:OutputPath="${win_artifacts_root}" //m //v:m //clp:ErrorsOnly
  >&2 echo "--MSBUILD finished successfully--"

  >&2 echo "--Cleaning packages--"
  rimraf packages
  >&2 echo "--Packages cleaned successfully--"
popd >/dev/null

if [ "$encrypt" = true ] ; then
  if ! hash cryptkeeper 2>/dev/null; then
    npm install -g cryptkeeper &>/dev/null
  fi
  config_path="$NET_ARTIFACTS_ROOT/Tix.Web.SelfHost.exe.config"
  cryptkeeper -e -n -s connectionStrings "$config_path"
fi

>&2 echo -e "${GREEN}--Artifacts version $version successfully deployed--${NC}"