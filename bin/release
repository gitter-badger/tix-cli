#!/bin/bash
#
# Deploys a specific set of code across projects

set -e

install-tixrc
. "$HOME/.tixrc"

latest=false
configuration=Release
encrypt=false
artifacts_root="$ARTIFACTS_ROOT"
js_version=""
net_version=""

usage_short="${CYAN}Usage: release [-l] [-c configuration] [-e] [-d destination-path] [-j js-version] [-n net-version]"
usage_long="$usage_short\n-l: deploy latest across all libraries"
usage_long="$usage_long\n-c: configuration to deploy (default: $configuration)"
usage_long="$usage_long\n-e: encrypt connection strings configuration (default: $encrypt)"
usage_long="$usage_long\n-d: optional destination directory (default: $artifacts_root)"
usage_long="$usage_long\n-D: optional destination directory (default: $artifacts_root)"
usage_long="$usage_long\n-j: tixinc-js version to deploy"
usage_long="$usage_long\n-n: tixinc-net version to deploy${NC}"

usage_short="$usage_short\nUse -h to get supported command information.${NC}"

options=":lc:ed:j:n:h"
shopt -u nocasematch
OPTIND=1
while getopts "$options" opt ; do
    case "$opt" in
    l )
      latest=true
      ;;
    c )
      configuration="$OPTARG"
      ;;
    e )
      encrypt=true
      ;;
    d )
      artifacts_root="$OPTARG"
      ;;
    j )
      js_version="$OPTARG"
      ;;
    n )
      net_version="$OPTARG"
      ;;
   h )
      >&2 printf -- "%b\n" "$usage_long"
      exit 0
      ;;
    \?)
      >&2 printf -- "unknown option: -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
      ;;
    : )
      >&2 printf -- "missing option argument for -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
      ;;
    * )
      >&2 printf -- "unimplemented option: -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))

if [ "$latest" = true ] ; then
  >&2 printf -- "%b- latest (-l) flag specified, getting the latest annotated tagged versions of tixinc-js and tixinc-net -%b\n" "$CYAN" "$NC"
  js_version=$(revisions -l tixinc-js)
  >&2 printf -- "%b- using js version %s -%b\n" "$CYAN" "$js_version" "$NC"
  net_version=$(revisions -l tixinc-net)
  >&2 printf -- "%b- using net version %s -%b\n" "$CYAN" "$net_version" "$NC"
fi

if [ "$js_version" = "" ] ; then
  >&2 printf -- "%b- tixinc-js (-j) version string is mandatory.  Use \"revisions -m tixinc-js\" to see recent versions -%b\n" "$RED" "$NC"
  exit 1
fi
if [ "$net_version" = "" ] ; then
  >&2 printf -- "%b- tixinc-net (-n) version string is mandatory.  Use \"revisions -m tixinc-net\" to see recent versions -%b\n" "$RED" "$NC"
  exit 1
fi

>&2 printf -- "- cleaning previous builds -\n"
rimraf "$JS_BUILD_ROOT"
rimraf "$NET_BUILD_ROOT"

configuration_lower="$(printf -- "%s" "$configuration" | tr '[:upper:]' '[:lower:]')"
release_name="$(printf -- "net_%s-js_%s-%s" "$net_version" "$js_version" "$configuration_lower")"
>&2 printf -- "- building and packaging release %s -\n" "$release_name"
if [ "$encrypt" = true ] ; then
  build-net -v "$net_version" -c "$configuration" -V 12.0 -e
else
  build-net -v "$net_version" -c "$configuration" -V 12.0
fi
build-js -v "$js_version" -c "$configuration_lower" -C
deploy-bin

artifacts_path="${artifacts_root}/${release_name}.7z"

rimraf "$artifacts_path"
mkdirp "$artifacts_root"

>&2 printf -- "- packaging release to %s -\n" "$release_path"
pushd "$RELEASE_ROOT" >/dev/null
  # 7zip the built artifacts using LZMA2 max compression and multithreading
  7za a -t7z "$artifacts_path" ./* -m0=lzma2 -mx=9 -aoa -mfb=64 -md=32m -ms=on
popd >/dev/null

>&2 printf -- "%b- release packaged successfully at %s -%b\n" "$GREEN" "$artifacts_path" "$NC"
