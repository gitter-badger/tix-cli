#!/bin/bash
#
# This script prepares the tix-cli dependencies and starts it.

set -e

install-tixrc
CONFIG_PATH="$HOME/.tixrc"
if [ -f "$CONFIG_PATH" ] ; then
  . "$CONFIG_PATH"
fi

# Define flags
rewrite_tixrc=false
install_required=false
install_optional=false
reinstall_cli=false
uninstall_flag=false
reinstall_flag=false
clone_flag=false
link_flag=false
install_flag=false
pull_flag=false
interactive=false

usage_short="${CYAN}usage: tix [-I] [-O] [-W] [-R] [-U] [-F] [-c] [-l] [-i] [-p] [-n]"
usage_long="$usage_short\n-I: install required dependencies"
usage_long="$usage_long\n-O: install optional dependencies"
usage_long="$usage_long\n-W: rewrite ~/.tixrc configuration file"
usage_long="$usage_long\n-R: reinstall cli to ~/local"
usage_long="$usage_long\n-U: uninstall all configuration files, local directory, src directory, and tixinc directory"
usage_long="$usage_long\n-F: full reinstall, this should be used with -D flag"
usage_long="$usage_long\n-c: clone all tixinc modules"
usage_long="$usage_long\n-l: npm link all tixinc modules"
usage_long="$usage_long\n-i: npm install all tixinc modules"
usage_long="$usage_long\n-p: pull all tixinc modules"
usage_long="$usage_long\n-n: interactive${NC}"

usage_short="$usage_short\nuse -h to get supported command information${NC}"

options=":IOWRUFclipnh"
shopt -u nocasematch
OPTIND=1
while getopts "$options" opt; do
    case "$opt" in
    W )
      rewrite_tixrc=true
      ;;
    I )
      install_required=true
      ;;
    O )
      install_optional=true
      ;;
    R )
      reinstall_cli=true
      ;;
    U )
      uninstall_flag=true
      ;;
    F )
      reinstall_flag=true
      ;;
    c )
      clone_flag=true
      ;;
    l )
      link_flag=true
      ;;
    i )
      install_flag=true
      ;;
    p )
      pull_flag=true
      ;;
    d )
      deploy_flag=true
      ;;
    n )
      interactive=true
    ;;
   h )
      >&2 printf -- "%b\n" "$usage_long"
      exit 0
      ;;
    \?)
      >&2 printf -- "unknown option: -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
      ;;
    : )
      >&2 printf -- "missing option argument for -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
      ;;
    * )
      >&2 printf -- "unimplemented option: -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))



# Delete option comes first
if [ "$uninstall_flag" = true ] ; then
  >&2 printf -- "%b- deleting everything... -%b\n" "$RED" "$NC"
  rimraf "$MODULE_ROOT"
  rimraf "$SRC_ROOT"
  rimraf "$SSH_ROOT"
  rimraf "$NPMRC_PATH"
  rimraf "$LOG_PATH"
  rimraf "$CONFIG_PATH"

  rimraf "$TEMP_ROOT"
  mkdirp "$TEMP_ROOT"

  temp_script="$TEMP_ROOT/delete.cmd"
  printf -- "timeout /t 4\r\n" >"$temp_script"
  printf -- "rmdir /s /q %%USERPROFILE%%\\local\r\n" >>"$temp_script"
  if [ "$reinstall_flag" = true ] ; then
    printf -- "@PowerShell -NoProfile -ExecutionPolicy unrestricted -Command \"If(Test-Path %%TEMP%%\\t.ps1){rm %%TEMP%%\\t.ps1};((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/TixInc/tix-cli/master/src/ps1/download-src.ps1?$(Get-Random)'))|Out-File %%TEMP%%\\t.ps1;%%TEMP%%\\t.ps1 -Install -CleanSource -CleanLocal;rm %%TEMP%%\\t.ps1\" & exit\r\n" >>"$temp_script"
  fi
  >&2 printf -- "%b- goodbye -%b" "$GREEN" "$NC"
  cmd //c "$temp_script" & disown
  exit 0
fi

# Install these first
if [ "$install_required" = true ] ; then
  >&2 printf -- "- installing required... -\n"
  install-required
  >&2 printf -- "%b- required install complete -%b\n" "$GREEN" "$NC"
fi


if [ "$rewrite_tixrc" = true ] ; then
  >&2 printf -- "- rewriting ~/.tixrc... -\n"
  rimraf "$CONFIG_PATH"
fi
if [ ! -f "$CONFIG_PATH" ] ; then
  install-tixrc
  >&2 printf -- "- ~/.tixrc file initialized -\n"
fi
. "$CONFIG_PATH"

### Get tokens / auth
GITHUB_TOKEN=$(github-token)
npm-token
. "$CONFIG_PATH"

if [ ! -f "$CLI_PATH" ] || [ "$reinstall_cli" = true ] ; then
  >&2 printf -- "- installing cli to %b... -\n" "$CLI_PATH"
  rimraf "$CLI_PATH"
  install-cli
  >&2 printf -- "%b- local install complete -%b\n" "$GREEN" "$NC"
fi

if [ "$install_optional" = true ] ; then
  install-optional
fi

if [ "$clone_flag" = true ] ; then
  clone-all-dev
fi

if [ "$link_flag" = true ] ; then
  link-all
fi

if [ "$install_flag" = true ] ; then
  install-all
fi

if [ "$pull_flag" = true ] ; then
  pull-all
fi

# if more arguments this is a chained command
if [ $# -gt 0 ]; then
  command="$1"
  shift
  tix-"$command" "$@"
  exit 0
fi

if [ "$interactive" = false ] ; then
  exit 0
fi

printf -- "- executing cli at %s... -\n" "$CLI_PATH"
node "$CLI_PATH"
