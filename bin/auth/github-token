#!/bin/bash
#
# Gets a git token from .tixrc or creates one
# All stdout from this script should be redirected to stderr since the expectation is that this script will only produce a token on stdout

source $HOME/.tixrc

readonly GITHUB_TOKEN_KEY="GITHUB_TOKEN"

### --GIT CONFIG--
### Setup global git configuration if not set.

git_config=$(git config --global -l)

if ! grep -q user.name <<< "$git_config" ; then
  >&2 echo "No user found in git global configuration."
  >&2 echo -n "Your name: "
  read git_user
  git config --global user.name "$git_user"
fi
if ! grep -q user.email <<< "$git_config" ; then
  >&2 echo "No user email found in git global configuration."
  >&2 echo -n "Your email: "
  read git_email
  git config --global user.email $git_email
fi
if ! grep -q credential.helper <<< "$git_config" ; then
  >&2 echo "Configuring credential helper..."
  git config --global credential.helper wincred
fi



### If config file does not exist or does not contain the github token
if [ ! -e "$CONFIG_PATH" ] || ! grep -q $GITHUB_TOKEN_KEY $CONFIG_PATH; then
    >&2 echo Your GitHub credentials are required to interact with the GitHub api.
    >&2 echo A token will be persisted to $CONFIG_PATH...

    oauth_note="OAuth token for interacting with GitHub API from tix-cli."
    oauth_data="{\"scopes\":[\"repo\"], \"note\":\"$oauth_note\"}"
    oauth_credentials=""
    oauth_credentials_ok=false
    oauth_token_received=false
    oauth_response=""

    while [ "$oauth_token_received" = false ]; do
      if [ "$oauth_credentials_ok" = false ]; then
        ### Read users GitHub credentials
        >&2 echo -n "GitHub Username: "
        read username
        >&2 echo -n "GitHub Password: "
        read -s password
        oauth_credentials="$username:$password"
      fi

      ### Call GitHub API to get a token.
      oauth_response=$(curl -s -u $oauth_credentials -X POST -d "$oauth_data" https://api.github.com/authorizations) 2>&1

      case "$oauth_response" in
          *"token"*) ### Token Found!
            oauth_credentials_ok=true
            oauth_token_received=true
            >&2 echo "Token received, persisting..."
            ;;
          *already_exists*) ### Token already exists but was not found on this machine...
            oauth_credentials_ok=true
            >&2 echo "A token has already been granted for you but has been deleted from this machine.  Delete the \"$oauth_note\" token at spawned window and hit enter..."
            chrome_path="unknown"
            token_url="https://github.com/settings/tokens"
            if [ "$PNAME" = "windows" ]; then
              chrome_path="C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
            elif [ "$PLATFORM" = "osx" ]; then
              chrome_path="$(osascript -e 'POSIX path of (path to application "Chrome")')Contents/MacOS/Google Chrome"
            fi
            >&2 "$chrome_path" "$token_url"
            read
            ;;
          *Bad\ credentials*) ### Wrong username/password provided
            >&2 echo "The username / password combination you provided was incorrect.  Try again..."
            ;;
          *) ### Unknown Issue
            >&2 echo "An unknown error occurred.  Log file saved to $LOG_PATH..."
            echo "Unknown issue authenticating with GitHub API - response: $oauth_response" >> $LOG_PATH
            exit 1
            ;;
      esac
    done

    ### Parse out the token from the json response and stick it in the token file
    echo $oauth_response | tr ',' '\n' | tr -d '" {}' | grep ^token: | sed s/token:// | while read token
        do
         if [ ${#token} -eq 40 ]; then
            echo "export $GITHUB_TOKEN_KEY=\"$token\"" > $CONFIG_PATH
         fi
        done
fi

### Source the variable from the config file
source $CONFIG_PATH

if [ -n $GITHUB_TOKEN ]; then
    echo "$GITHUB_TOKEN" | tr -d '\n'
    exit 0
else
    >&2 echo "$GITHUB_TOKEN_KEY not found in the config file! Exiting..."
    exit 1
fi
