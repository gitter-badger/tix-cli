#!/bin/bash
#
# This script ($HOME/.tixrc) runs at the start of the tix-cli initiation and exports all variables used by the package.
# Users or scripts may write variables to this file with the following command:
# echo 'export VARIABLE_NAME="VARIABLE_VALUE"' >>${HOME}/.tixrc

### --PLATFORM--
### Figure out what platform this OS this is and standardize it

PLATFORM="unknown"  ### The name of the platform
PNAME="unknown"     ### The general name of the platform (unix / windows)

unix_name=$(uname)
shopt -s nocasematch
case "$unix_name" in
  *unix*)
    PLATFORM="unix"
    ;;
  *linux*)
    PLATFORM="linux"
    ;;
  *freebsd*)
    PLATFORM="freebsd"
    ;;
  *darwin*)
    PLATFORM="osx"
    ;;
  *windows*|*ming*)
    PLATFORM="windows"
    ;;
esac

case "$PLATFORM" in
  linux|unix|freebsd|osx)
  PNAME="unix"
  ;;
  windows)
  PNAME="windows"
  ;;
  *)
  >&2 echo "Unable to classify the system OS -> uname: $unix_name, PLATFORM: $PLATFORM"
  exit 1
esac


### --OS INFO--
### Export all OS high level info here

export PLATFORM
export PNAME


### --URLs--
### Store any commonly used URLs here

export GITHUB_URL_BASE="https://github.com"
export GITHUB_URL_TIX="$GITHUB_URL_BASE/TixInc"
export GITHUB_URL_CLI="$GITHUB_URL_TIX/tix-cli"
export GITHUB_URL_FONTS="$GITHUB_URL_BASE/powerline/fonts.git"

### --PATHS--
### All paths are absolute.
### ROOT suffix => directory, PATH suffix => file


### SYSTEM PATHS
CHROME_PATH="unknown"
if [ "$PNAME" = "windows" ]; then
  CHROME_PATH="C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
elif [ "$PLATFORM" = "osx" ]; then
  CHROME_PATH="$(osascript -e 'POSIX path of (path to application "Chrome")')Contents/MacOS/Google Chrome"
fi
export CHROME_PATH


### LOCAL PATHS
export INSTALL_ROOT="${HOME}"                                            # ./
export NPMRC_PATH="${HOME}/.npmrc"                                       # ~/.npmrc
export CONFIG_PATH="${INSTALL_ROOT}/.tixrc"                              # ./.tixrc
export LOCAL_ROOT="${INSTALL_ROOT}/local"                                # ./local
export LOG_PATH="${LOCAL_ROOT}/tix.log"                                  # ./local/tix.log
export LOCAL_CONFIG_ROOT="${LOCAL_ROOT}/config"                          # ./local/config
export RES_CONFIG_PATH="${LOCAL_CONFIG_ROOT}/res.config"                 # ./local/config/res.config
export LOCAL_BIN_ROOT="${LOCAL_ROOT}/bin"                                # ./local/bin
export LOCAL_CHROME_ROOT="${LOCAL_ROOT}/chrome"                          # ./local/chrome
export LOCAL_FONTS_ROOT="${LOCAL_ROOT}/fonts"                          # ./local/chrome

### Prepend path with ./local/bin
if ! grep -q "${LOCAL_BIN_ROOT}" <<< "$PATH" ; then
  export PATH="$LOCAL_BIN_ROOT:$PATH"
fi


### SRC PATHS
export SRC_ROOT="${INSTALL_ROOT}/src"                                    # ./src
export SRC_BIN_ROOT="${SRC_ROOT}/bin"                                    # ./src/bin
export SRC_ZIP_ROOT="${SRC_ROOT}/zip"                                    # ./src/zip


### MODULE PATHS
export MODULE_ROOT="${INSTALL_ROOT}/tixinc"                              # ./tixinc
export CLI_ROOT="${MODULE_ROOT}/tix-cli"                                 # ./tixinc/tix-cli
export CLI_PATH="${CLI_ROOT}/tix-cli.js"                                 # ./tixinc/tix-cli/tix-cli.js
export JS_ROOT="${MODULE_ROOT}/tixinc-js"                                # ./tixinc/tixinc-js
export NET_ROOT="${MODULE_ROOT}/tixinc-net"                              # ./tixinc/tixinc-net
export NET_SELFHOST_ROOT="${NET_ROOT}/Tix.Web.SelfHost"                  # ./tixinc/tixinc-net/Tix.Web.SelfHost
export NET_PROJECT_PATH="${NET_SELFHOST_ROOT}/Tix.Web.SelfHost.csproj"   # ./tixinc/tixinc-net/Tix.Web.SelfHost/Tix.Web.SelfHost.csproj
export ARTIFACTS_ROOT="${MODULE_ROOT}/artifacts"                         # ./tixinc/artifacts
export NET_ARTIFACTS_ROOT="${ARTIFACTS_ROOT}/tixinc-net"                 # ./tixinc/artifacts/tixinc-net/




