#!/bin/bash
#
# Deploys fresh tixinc-js artifacts

set -e
. "$HOME/.tixrc"

latest=false
version=""
configuration="debug"
clean_build_flag=false
skip_install_flag=false

usage_short="${BLUE}usage: build-js [-l] [-v version] [-c configuration] [-C] [-s]"
usage_long="$usage_short\n-l: Deploy latest version of tixinc-js"
usage_long="$usage_long\n-v: Deploy specific version (tag or hash)"
usage_long="$usage_long\n-c: configuration to use (default: $configuration)"
usage_long="$usage_long\n-C: clean previous build"
usage_long="$usage_long\n-s: skip npm install${NC}"

usage_short="$usage_short\nuse -h to get supported command information${NC}"

options=":lv:c:Csh"
shopt -u nocasematch
OPTIND=1
while getopts "$options" opt ; do
    case "$opt" in
    l )
      latest=true
      ;;
    v )
      version="$OPTARG"
      ;;
    c )
      configuration="$OPTARG"
      ;;
    C )
      clean_build_flag=true
      ;;
    s )
      skip_install_flag=true
      ;;
   h )
      >&2 printf -- "%b\n" "$usage_long"
      exit 0
      ;;
    \?)
      >&2 printf -- "unknown option: -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
      ;;
    : )
      >&2 printf -- "missing option argument for -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
      ;;
    * )
      >&2 printf -- "unimplemented option: -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))

if [ "$latest" = true ] ; then
  version="$(revisions -l tixinc-js)"
fi

if [ "$version" = "" ] ; then
  >&2 printf "%b- must specify a JS version to build (-l or -v version) -%b\n" "$RED" "$NC"
  exit 1
fi

>&2 printf -- "- executing sync-js %s -\n" "$version"
sync-js "$version"

>&2 printf -- "- cleaning previous js release -\n"
if [ "$clean_build_flag" = true ] ; then
  rimraf "$JS_BUILD_ROOT"
fi
rimraf "$JS_RELEASE_ROOT"

>&2 printf -- "- building js version %s -\n" "$version"
mkdirp "$JS_BUILD_ROOT"
mkdirp "$JS_RELEASE_ROOT"
#cpj "$JS_SYNC_ROOT" "$JS_BUILD_ROOT"
pushj "$JS_RELEASE_ROOT"
  js_release_junc="$PWD"
  pushj "$JS_BUILD_ROOT"
    js_build_junc="$PWD"
    pushj "$JS_SYNC_ROOT"
      cp -rf ./ "$js_build_junc"
    popj

    if [ "$skip_install_flag" != true ] ; then
      # Make non-build debug dependencies optional and they won't get installed for builds
      npm install --no-optional
    fi
    npm run configure "$configuration"
    npm run build
    npm prune --production

    cp -rf ./ "$js_release_junc"

  popj

      #npm prune --production


  rimraf .git
  rimraf .gitignore
  rimraf .gitattributes
  rimraf gulpfile.js
  rimraf client
  rimraf etc
  rimraf test
  pushd bin
    shopt -s extglob
    rimraf !(www)
    >&2 printf -- "- downloading 64 bit node.exe to release bin -\n"
    curl -sL http://nodejs.org/dist/latest/x64/node.exe >node.exe
  popd
popj

#>&2 printf -- "- building js release version %s -\n" "$version"
#mkdirp "$JS_RELEASE_ROOT"
#cpj "$JS_BUILD_ROOT" "$JS_RELEASE_ROOT"
#pushj "$JS_RELEASE_ROOT"
#  npm prune --production
#
#  rimraf .git
###  rimraf .gitignore
#  rimraf .gitattributes
#  rimraf gulpfile.js
#  rimraf client
#  rimraf etc
#  rimraf test

#  pushd bin
#    shopt -s extglob
#    rimraf !(www)
##    >&2 printf -- "- downloading 64 bit node.exe to release bin -\n"
#    curl -sL http://nodejs.org/dist/latest/x64/node.exe >node.exe
#  popd
#popj

>&2 printf "%b- js artifacts version %s successfully deployed -%b" "$GREEN" "$version" "$NC"
