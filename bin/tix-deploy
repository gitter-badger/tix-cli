#!/bin/bash
#
# Deploys a specific set of code across projects

set -e

. "$HOME/.tixrc"

latest_flag=false
database_flag=false
configuration=Debug

usage_short="${CYAN}Usage: tix deploy [-l] [-D] [-c configuration]"
usage_long="$usage_short\n-l: deploy latest across all libraries"
usage_long="$usage_long\n-D: deploy database"
usage_long="$usage_long\n-c: configuration to deploy (default: $configuration)${NC}"

usage_short="$usage_short\nUse -h to get supported command information.${NC}"

options=":lc:ed:j:n:h"
shopt -u nocasematch
OPTIND=1
while getopts "$options" opt ; do
    case "$opt" in
    l )
      latest_flag=true
      ;;
    D )
      database_flag=true
      ;;
    c )
      configuration="$OPTARG"
      ;;
   h )
      >&2 printf -- "%b\n" "$usage_long"
      exit 0
      ;;
    \?)
      >&2 printf -- "unknown option: -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
      ;;
    : )
      >&2 printf -- "missing option argument for -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
      ;;
    * )
      >&2 printf -- "unimplemented option: -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))

if [ "$latest_flag" = true ] ; then
  >&2 printf -- "%b- latest (-l) flag specified, getting the latest annotated tagged versions of tixinc-js and tixinc-net -%b\n" "$CYAN" "$NC"
  js_version=$(revisions -l tixinc-js)
  >&2 printf -- "%b- using js version %s -%b\n" "$CYAN" "$js_version" "$NC"
  net_version=$(revisions -l tixinc-net)
  >&2 printf -- "%b- using net version %s -%b\n" "$CYAN" "$net_version" "$NC"
fi


>&2 printf -- "- cleaning previous builds -\n"
rimraf "$JS_BUILD_ROOT"
rimraf "$NET_BUILD_ROOT"

configuration_lower="$(printf -- "%s" "$configuration" | tr '[:upper:]' '[:lower:]')"
release_name="$(printf -- "net_%s-js_%s-%s" "$net_version" "$js_version" "$configuration_lower")"
>&2 printf -- "- building and packaging release %s -\n" "$release_name"
if [ "$encrypt" = true ] ; then
  build-net -v "$net_version" -c "$configuration" -V 12.0 -e
else
  build-net -v "$net_version" -c "$configuration" -V 12.0
fi
build-js -v "$js_version" -c "$configuration_lower" -C
deploy-startup

artifacts_path="${artifacts_root}/${release_name}.7z"

rimraf "$artifacts_path"
mkdirp "$artifacts_root"

>&2 printf -- "- packaging release to %s -\n" "$release_path"
pushd "$RELEASE_ROOT" >/dev/null
  # 7zip the built artifacts using LZMA2 max compression and multithreading
  7za a -t7z "$artifacts_path" ./* -m0=lzma2 -mx=9 -aoa -mfb=64 -md=32m -ms=on
popd >/dev/null

>&2 printf -- "%b- release packaged successfully at %s -%b\n" "$GREEN" "$artifacts_path" "$NC"
