#!/bin/bash
#
# Clones the specified module to a directory in the modules installation root

set -e

. "$HOME/.tixrc"

# Define flags
sync_flag=false

usage_short="${CYAN}Usage: clone-module [-s] module-name [relative-path]"
usage_long="$usage_short\n-s: clone the module to the sync root instead of module root.${NC}"

usage_short="$usage_short\nUse -h to get supported command information.${NC}"

options=":sh"
OPTIND=1
while getopts "$options" opt; do
    case "$opt" in
    b )
      sync_flag=true
      ;;
   h )
      >&2 printf -- "%b\n" "$usage_long"
      exit 0
      ;;
    \?)
      >&2 printf -- "unknown option: -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
      ;;
    : )
      >&2 printf -- "missing option argument for -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
      ;;
    * )
      >&2 printf -- "unimplemented option: -%b\n" "$OPTARG"
      >&2 printf -- "%b\n" "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))


### if no arguments, throw an error
if [ $# -eq 0 ]; then
  >&2 printf -- "%b- must specify a module to clone -%b" "$RED" "$NC"
  exit 1
fi

module_name="$1"
module_dir="${2-$module_name}"
module_root="$MODULE_ROOT"

if [ "$sync_flag" = true ] ; then
  module_root="$SYNC_ROOT"
fi

module_url="$GITHUB_URL_TIX/$module_name"
module_path="$module_root/$module_dir"

### if module already cloned, throw an error
if [ -d "$module_path" ]; then
  >&2 printf -- "%b- module %s already exists at %s -%b" "$CYAN" "$module_name" "$module_path" "$NC"
  exit 1
fi

>&2 printf -- "- cloning %s to %s... -" "$module_url" "$module_path"
git clone "$module_url" "$module_path" 2>&1 | grep -qi "fatal" && >&2 printf -- "An error occurred while cloning." && exit 1
>&2 printf -- "%b- %s cloned successfully -%b" "$GREEN" "$module_name" "$NC"